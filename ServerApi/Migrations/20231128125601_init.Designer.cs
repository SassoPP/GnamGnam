// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApi.Data;

#nullable disable

namespace ServerApi.Migrations
{
    [DbContext(typeof(RicettarioDbContext))]
    [Migration("20231128125601_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ServerApi.Model.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("FotoData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("RicettaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FotoId");

                    b.HasIndex("RicettaId");

                    b.ToTable("Fotos");

                    b.HasData(
                        new
                        {
                            FotoId = 1,
                            Descrizione = "Immagine della Pasta al Pomodoro",
                            FotoData = new byte[0],
                            RicettaId = 1
                        },
                        new
                        {
                            FotoId = 2,
                            Descrizione = "Immagine del Salmone alla Griglia",
                            FotoData = new byte[0],
                            RicettaId = 2
                        },
                        new
                        {
                            FotoId = 3,
                            Descrizione = "Immagine dell'Insalata di Riso",
                            FotoData = new byte[0],
                            RicettaId = 3
                        },
                        new
                        {
                            FotoId = 4,
                            Descrizione = "Immagine del Pollo al Curry",
                            FotoData = new byte[0],
                            RicettaId = 4
                        },
                        new
                        {
                            FotoId = 5,
                            Descrizione = "Immagine del Muffin al Cioccolato",
                            FotoData = new byte[0],
                            RicettaId = 5
                        },
                        new
                        {
                            FotoId = 6,
                            Descrizione = "Immagine del Muffin al Cioccolato 2",
                            FotoData = new byte[0],
                            RicettaId = 5
                        });
                });

            modelBuilder.Entity("ServerApi.Model.FotoUtente", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("FotoData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("UtenteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FotoId");

                    b.HasIndex("UtenteId")
                        .IsUnique();

                    b.ToTable("FotosUtenti");

                    b.HasData(
                        new
                        {
                            FotoId = 1,
                            FotoData = new byte[0],
                            UtenteId = 1
                        },
                        new
                        {
                            FotoId = 2,
                            FotoData = new byte[0],
                            UtenteId = 2
                        },
                        new
                        {
                            FotoId = 3,
                            FotoData = new byte[0],
                            UtenteId = 3
                        });
                });

            modelBuilder.Entity("ServerApi.Model.Ingrediente", b =>
                {
                    b.Property<int>("IngredienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IngredienteId");

                    b.ToTable("Ingredienti");

                    b.HasData(
                        new
                        {
                            IngredienteId = 1,
                            DataFine = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Prodotto derivato dalla macinazione dei cereali.",
                            Nome = "Farina"
                        },
                        new
                        {
                            IngredienteId = 2,
                            DataFine = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Frutto comunemente utilizzato in cucina.",
                            Nome = "Pomodoro"
                        },
                        new
                        {
                            IngredienteId = 3,
                            DataFine = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Vegetale dal sapore caratteristico.",
                            Nome = "Cipolla"
                        },
                        new
                        {
                            IngredienteId = 4,
                            DataFine = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Spezia aromatica utilizzata in molti piatti.",
                            Nome = "Aglio"
                        },
                        new
                        {
                            IngredienteId = 5,
                            DataFine = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Spezia piccante usata in diverse cucine del mondo.",
                            Nome = "Peperoncino"
                        },
                        new
                        {
                            IngredienteId = 6,
                            DataFine = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Pesce ricco di omega-3.",
                            Nome = "Salmone"
                        },
                        new
                        {
                            IngredienteId = 7,
                            DataFine = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Vegetale verde e versatile in cucina.",
                            Nome = "Zucchine"
                        },
                        new
                        {
                            IngredienteId = 8,
                            DataFine = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Spezia comune per condire i piatti.",
                            Nome = "Pepe nero"
                        },
                        new
                        {
                            IngredienteId = 9,
                            DataFine = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Varietà di riso aromatica.",
                            Nome = "Riso basmati"
                        },
                        new
                        {
                            IngredienteId = 10,
                            DataFine = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Vegetale viola ampiamente utilizzato in cucina.",
                            Nome = "Melanzane"
                        },
                        new
                        {
                            IngredienteId = 11,
                            DataFine = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Carne di pollame comunemente consumata.",
                            Nome = "Pollo"
                        },
                        new
                        {
                            IngredienteId = 12,
                            DataFine = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Miscela di spezie utilizzata nella cucina indiana.",
                            Nome = "Curry in polvere"
                        },
                        new
                        {
                            IngredienteId = 13,
                            DataFine = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Vegetale a foglia verde ricco di nutrienti.",
                            Nome = "Spinaci"
                        },
                        new
                        {
                            IngredienteId = 14,
                            DataFine = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Condimento utilizzato in molte cucine asiatiche.",
                            Nome = "Salsa di soia"
                        },
                        new
                        {
                            IngredienteId = 15,
                            DataFine = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Pasta fermentata utilizzata nella cucina giapponese.",
                            Nome = "Pasta di miso"
                        },
                        new
                        {
                            IngredienteId = 16,
                            DataFine = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Varietà di pepe meno maturo, spesso utilizzato fresco.",
                            Nome = "Pepe verde"
                        },
                        new
                        {
                            IngredienteId = 17,
                            DataFine = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Legume ricco di proteine.",
                            Nome = "Lenticchie"
                        },
                        new
                        {
                            IngredienteId = 18,
                            DataFine = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Varietà di funghi apprezzata in cucina.",
                            Nome = "Funghi porcini"
                        },
                        new
                        {
                            IngredienteId = 19,
                            DataFine = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Frutto agrumato ricco di vitamina C.",
                            Nome = "Arancia"
                        },
                        new
                        {
                            IngredienteId = 20,
                            DataFine = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInizio = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descrizione = "Varietà di cioccolato con alto contenuto di cacao.",
                            Nome = "Cioccolato fondente"
                        });
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.Property<int>("RicettaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAggiunta")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Difficolta")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Piatto")
                        .HasColumnType("int");

                    b.Property<string>("Preparazione")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Tempo")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Ricette");

                    b.HasData(
                        new
                        {
                            RicettaId = 1,
                            DataAggiunta = new DateTime(2023, 11, 28, 13, 56, 1, 732, DateTimeKind.Local).AddTicks(4708),
                            Difficolta = 2,
                            Nome = "Pasta al Pomodoro",
                            Piatto = 0,
                            Preparazione = "Cuocere la pasta e condirla con pomodoro fresco, olio e basilico.",
                            Tempo = 30,
                            UtenteId = 1
                        },
                        new
                        {
                            RicettaId = 2,
                            DataAggiunta = new DateTime(2023, 11, 28, 13, 56, 1, 732, DateTimeKind.Local).AddTicks(4765),
                            Difficolta = 3,
                            Nome = "Salmone alla Griglia",
                            Piatto = 1,
                            Preparazione = "Marinare il salmone e cuocerlo alla griglia con limone e erbe aromatiche.",
                            Tempo = 45,
                            UtenteId = 1
                        },
                        new
                        {
                            RicettaId = 3,
                            DataAggiunta = new DateTime(2023, 11, 28, 13, 56, 1, 732, DateTimeKind.Local).AddTicks(4768),
                            Difficolta = 1,
                            Nome = "Insalata di Riso",
                            Piatto = 7,
                            Preparazione = "Cuocere il riso, mescolarlo con verdure e condire con olio e aceto.",
                            Tempo = 20,
                            UtenteId = 2
                        },
                        new
                        {
                            RicettaId = 4,
                            DataAggiunta = new DateTime(2023, 11, 28, 13, 56, 1, 732, DateTimeKind.Local).AddTicks(4771),
                            Difficolta = 3,
                            Nome = "Pollo al Curry",
                            Piatto = 1,
                            Preparazione = "Cuocere il pollo e aggiungere una salsa di curry speziata.",
                            Tempo = 40,
                            UtenteId = 2
                        },
                        new
                        {
                            RicettaId = 5,
                            DataAggiunta = new DateTime(2023, 11, 28, 13, 56, 1, 732, DateTimeKind.Local).AddTicks(4774),
                            Difficolta = 2,
                            Nome = "Muffin al Cioccolato",
                            Piatto = 2,
                            Preparazione = "Preparare l'impasto con farina, cioccolato fondente e zucchero.",
                            Tempo = 25,
                            UtenteId = 3
                        });
                });

            modelBuilder.Entity("ServerApi.Model.RicettaIngrediente", b =>
                {
                    b.Property<int>("RicettaId")
                        .HasColumnType("int");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId", "IngredienteId");

                    b.HasIndex("IngredienteId");

                    b.ToTable("RicetteIngredienti");

                    b.HasData(
                        new
                        {
                            RicettaId = 1,
                            IngredienteId = 1
                        },
                        new
                        {
                            RicettaId = 1,
                            IngredienteId = 2
                        },
                        new
                        {
                            RicettaId = 1,
                            IngredienteId = 3
                        },
                        new
                        {
                            RicettaId = 2,
                            IngredienteId = 6
                        },
                        new
                        {
                            RicettaId = 2,
                            IngredienteId = 7
                        },
                        new
                        {
                            RicettaId = 3,
                            IngredienteId = 8
                        },
                        new
                        {
                            RicettaId = 3,
                            IngredienteId = 9
                        },
                        new
                        {
                            RicettaId = 3,
                            IngredienteId = 10
                        },
                        new
                        {
                            RicettaId = 4,
                            IngredienteId = 11
                        },
                        new
                        {
                            RicettaId = 4,
                            IngredienteId = 12
                        },
                        new
                        {
                            RicettaId = 5,
                            IngredienteId = 20
                        });
                });

            modelBuilder.Entity("ServerApi.Model.Utente", b =>
                {
                    b.Property<int>("UtenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UtenteId");

                    b.ToTable("Utenti");

                    b.HasData(
                        new
                        {
                            UtenteId = 1,
                            Password = "pIbvhgmpVHahDBTYUgQvew==",
                            Username = "admin"
                        },
                        new
                        {
                            UtenteId = 2,
                            Password = "pIbvhgmpVHahDBTYUgQvew",
                            Username = "Bob456"
                        },
                        new
                        {
                            UtenteId = 3,
                            Password = "pIbvhgmpVHahDBTYUgQvew",
                            Username = "Charlie789"
                        });
                });

            modelBuilder.Entity("ServerApi.Model.UtenteRicettaSalvata", b =>
                {
                    b.Property<int>("RicettaId")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId", "UtenteId");

                    b.HasIndex("UtenteId");

                    b.ToTable("UtentiRicetteSalvate");

                    b.HasData(
                        new
                        {
                            RicettaId = 1,
                            UtenteId = 1
                        },
                        new
                        {
                            RicettaId = 2,
                            UtenteId = 1
                        },
                        new
                        {
                            RicettaId = 2,
                            UtenteId = 2
                        },
                        new
                        {
                            RicettaId = 3,
                            UtenteId = 2
                        },
                        new
                        {
                            RicettaId = 3,
                            UtenteId = 3
                        },
                        new
                        {
                            RicettaId = 4,
                            UtenteId = 3
                        });
                });

            modelBuilder.Entity("ServerApi.Model.UtenteUtenteSeguito", b =>
                {
                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int>("UtenteSeguitoId")
                        .HasColumnType("int");

                    b.HasKey("UtenteId", "UtenteSeguitoId");

                    b.HasIndex("UtenteSeguitoId");

                    b.ToTable("UtenteUtentiSeguiti");

                    b.HasData(
                        new
                        {
                            UtenteId = 1,
                            UtenteSeguitoId = 2
                        },
                        new
                        {
                            UtenteId = 1,
                            UtenteSeguitoId = 3
                        },
                        new
                        {
                            UtenteId = 2,
                            UtenteSeguitoId = 3
                        });
                });

            modelBuilder.Entity("ServerApi.Model.Foto", b =>
                {
                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("Fotos")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ricetta");
                });

            modelBuilder.Entity("ServerApi.Model.FotoUtente", b =>
                {
                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithOne("FotoUtente")
                        .HasForeignKey("ServerApi.Model.FotoUtente", "UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("Ricetta")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ServerApi.Model.RicettaIngrediente", b =>
                {
                    b.HasOne("ServerApi.Model.Ingrediente", "Ingrediente")
                        .WithMany("RicettaIngredienti")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("RicettaIngredienti")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Ricetta");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteRicettaSalvata", b =>
                {
                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("UtenteRicetteSalvate")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("UtenteRicetteSalvate")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ricetta");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteUtenteSeguito", b =>
                {
                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("UtenteUtentiSeguiti")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Utente", "UtenteSeguito")
                        .WithMany("UtenteUtentiChetiSeguono")
                        .HasForeignKey("UtenteSeguitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utente");

                    b.Navigation("UtenteSeguito");
                });

            modelBuilder.Entity("ServerApi.Model.Ingrediente", b =>
                {
                    b.Navigation("RicettaIngredienti");
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("RicettaIngredienti");

                    b.Navigation("UtenteRicetteSalvate");
                });

            modelBuilder.Entity("ServerApi.Model.Utente", b =>
                {
                    b.Navigation("FotoUtente")
                        .IsRequired();

                    b.Navigation("Ricetta");

                    b.Navigation("UtenteRicetteSalvate");

                    b.Navigation("UtenteUtentiChetiSeguono");

                    b.Navigation("UtenteUtentiSeguiti");
                });
#pragma warning restore 612, 618
        }
    }
}
